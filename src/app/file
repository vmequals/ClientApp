under configureservices/program.cs
--------------------------------
services.AddHttpClient("NotificationService", client =>
{
    client.BaseAddress = new Uri("https://your-notification-service-url/");
});


NotificationServiceClient
-------------------------

using System.Collections.Generic;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;
using YourNamespace.Models;

namespace YourNamespace.Services
{
    public class NotificationServiceClient
    {
        private readonly HttpClient _httpClient;

        public NotificationServiceClient(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient("NotificationService");
        }

        public async Task<IEnumerable<Notification>> GetNotificationsForGroupAsync(string groupId)
        {
            var response = await _httpClient.GetAsync($"api/Notifications/GetGroupNotifications/{groupId}");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<IEnumerable<Notification>>(content);
            }

            return null;
        }
    }
}

program.cs
--------
services.AddScoped<NotificationServiceClient>();


in the hub
---------
public class YourHub : Hub
{
    private readonly NotificationServiceClient _notificationServiceClient;

    public YourHub(NotificationServiceClient notificationServiceClient)
    {
        _notificationServiceClient = notificationServiceClient;
    }

    public async Task JoinGroup(string groupName)
    {
        await Groups.AddToGroupAsync(Context.ConnectionId, groupName);

        var notifications = await _notificationServiceClient.GetNotificationsForGroupAsync(groupName);

        // Process the notifications and send them to the frontend, if any
    }
}



custom JsonConverter
-----------------------
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;

public class MedewerkerNotificatieConverter : JsonConverter
{
    public override bool CanConvert(Type objectType)
    {
        return objectType == typeof(MedewerkerNotificatie);
    }

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        JObject jObject = JObject.Load(reader);

        MedewerkerNotificatie medewerkerNotificatie = new MedewerkerNotificatie
        {
            MedewerkerNotificatieId = jObject.Value<int>("medewerkernotificatieId"),
            MedewerkerId = jObject.Value<string>("medewerkerId"),
            NotificatieId = jObject.Value<int>("notificatieid")
        };

        JObject notificatieObject = jObject["notificatie"] as JObject;
        if (notificatieObject != null)
        {
            medewerkerNotificatie.Notificatie = new Notificatie
            {
                NotificatieId = notificatieObject.Value<int>("notificatieid"),
                Bron = notificatieObject.Value<string>("bron")
            };
        }

        return medewerkerNotificatie;
    }

    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        throw new NotImplementedException("This converter is for deserialization only.");
    }
}


deserialize
-------

using Newtonsoft.Json;

string jsonString = /* your JSON string */;

var settings = new JsonSerializerSettings
{
    PreserveReferencesHandling = PreserveReferencesHandling.Objects,
    Formatting = Formatting.Indented
};

List<MedewerkerNotificatie> medewerkerNotificaties = JsonConvert.DeserializeObject<List<MedewerkerNotificatie>>(jsonString, settings);




WITH VALUES
_________

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;

public class MedewerkerNotificatieConverter : JsonConverter
{
    public override bool CanConvert(Type objectType)
    {
        return objectType == typeof(MedewerkerNotificatie);
    }

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        JObject jObject = JObject.Load(reader);

        MedewerkerNotificatie medewerkerNotificatie = new MedewerkerNotificatie
        {
            MedewerkerNotificatieId = jObject.Value<int>("medewerkernotificatieId"),
            MedewerkerId = jObject.Value<string>("medewerkerId"),
            NotificatieId = jObject.Value<int>("notificatieid")
        };

        JObject notificatieObject = jObject["notificatie"] as JObject;
        if (notificatieObject != null)
        {
            medewerkerNotificatie.Notificatie = new Notificatie
            {
                NotificatieId = notificatieObject.Value<int>("notificatieid"),
                Bron = notificatieObject.Value<string>("bron")
            };
        }

        return medewerkerNotificatie;
    }

    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        throw new NotImplementedException("This converter is for deserialization only.");
    }
}


AND THEN
____
string jsonString = /* your JSON string */;

var settings = new JsonSerializerSettings
{
    Converters = new List<JsonConverter> { new MedewerkerNotificatieConverter() },
    Formatting = Formatting.Indented
};

List<MedewerkerNotificatie> medewerkerNotificaties = JsonConvert.DeserializeObject<List<MedewerkerNotificatie>>(jsonString, settings);
